# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  push:
    branches: ["main"]
    paths: ["**"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build_private:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
          working-directory: '${{ github.workspace }}'
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_private
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # sync and push to public repos if required
  sync_public:
    runs-on: ubuntu-latest
    if: github.repository == 'jppol-idp/docs'
    steps:
      - name: Checkout Private Repo
        uses: actions/checkout@v4
        #with:
        #  fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Authenticate with GitHub App
        uses: tibdex/github-app-token@v2
        id: app-token
        with:
          app_id: 1201393
          private_key: ${{ secrets.docs_sync_bot }}
      
      - name: Clone Public Repo
        run: |
          git clone https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/jppol-idp/internal-developer-platform.git public_repo

      - name: Sync Public Docs 
        run: |
          # Get all files except .md files and specific directories
          find . -type f ! -name "*.md" \
            ! -path "./referater/*" \
            ! -path "./one-mans-trash/*" \
            ! -path "./.git/*" \
            ! -path "./public_repo/*" > include_files.txt
          # Add .md files that contain 'domain: public'
          grep -rl 'domain: public' --include="*.md" . \
          | grep -vE '^\.\/(referater|one-mans-trash|\.git|public_repo)' >> include_files.txt
          # synchronize
          rsync -av --delete \
            --files-from=include_files.txt \
          ./ public_repo/

      - name: Commit and Push Changes
        run: |
          cd public_repo
          mv _config.yml.public _config.yml  # Ensure Just the Docs config is copied
          mv README.md.public README.md  # Ensure also the README is proper
          mv index.md.public index.md
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            git commit -m "Sync public docs - $(date)"
            git push origin main
          else
            echo "No changes to commit"
          fi
          
